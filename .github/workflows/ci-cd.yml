# This workflow combines Java CI, CodeQL SAST, Docker build, and Grype container scanning.
name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    # Scheduled runs from CodeQL and Grype templates
    - cron: '29 0 * * 1' # From CodeQL (e.g., Monday at 00:29 UTC)
    - cron: '30 5 * * 0' # From Grype (e.g., Sunday at 05:30 UTC)
  workflow_dispatch: # Allows manual triggering

jobs:
  # Stage 1: Build Java application and run tests
  build_and_test_java:
    name: Build Java & Submit Dependency Graph
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needs 'write' to submit dependency graph
    outputs:
      jar_artifact_name: app-jar # The name of the artifact
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven (includes tests)
        run: mvn -B package --file pom.xml # -B for batch mode. 'package' also runs 'test'.

      - name: Update dependency graph (for Dependabot alerts)
        uses: advanced-security/maven-dependency-submission-action@v4.0.0

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
          if-no-files-found: error
          # retention-days: 5

  # Stage 2: Static Code Analysis with CodeQL
  static_code_analysis_codeql:
    name: CodeQL SAST Analysis
    needs: build_and_test_java
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java-kotlin
            build-mode: none
          - language: actions
            build-mode: none
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3 # Consider updating to v3 if v2 is used, or latest v3.x.x
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - if: matrix.build-mode == 'manual'
        shell: bash
        run: |
          echo "Manual build steps for ${{ matrix.language }} would go here."
          echo "This example assumes 'build-mode: none' or 'autobuild' is sufficient."

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3 # Consider updating to v3 if v2 is used, or latest v3.x.x
        with:
          category: "/language:${{matrix.language}}"

  # Stage 3: Build Docker Image, Scan with Grype, and Push to Registry
  build_scan_and_push_docker:
    name: Build, Scan, & Push Docker Image
    needs: [build_and_test_java, static_code_analysis_codeql]
    runs-on: ubuntu-latest
    outputs:
        ghcr_image_name: ${{ steps.image_defs.outputs.GHCR_IMAGE_NAME }}
        ghcr_image_tag: ${{ steps.image_defs.outputs.GHCR_IMAGE_TAG }}
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_and_test_java.outputs.jar_artifact_name }}
          path: ./jar-artifact

      - name: Display downloaded JAR structure (for debugging)
        run: |
          echo "Listing contents of ./jar-artifact:"
          ls -R ./jar-artifact
          # Ensure your Dockerfile copies the JAR from this location, e.g.,
          # COPY ./jar-artifact/simple-webapp-*.jar app.jar
          # Or, if your Dockerfile builds the JAR itself (multi-stage), this download might be for other purposes or not strictly needed for the Docker build step.

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Define Image Tags
        id: image_defs
        run: |
          echo "GRYPE_IMAGE_TAG=localbuild/myapp-for-grype:latest" >> $GITHUB_OUTPUT
          GHCR_REPO_NAME_LOWER=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          echo "GHCR_IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/$GHCR_REPO_NAME_LOWER" >> $GITHUB_OUTPUT
          echo "GHCR_IMAGE_TAG=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build the Docker image for Grype Scan
        run: |
          # Ensure your Dockerfile is in the root or adjust path.
          # If your Dockerfile is multi-stage and builds the JAR, it uses source from checkout.
          # If your Dockerfile expects a pre-built JAR, ensure it copies from ./jar-artifact
          docker build . --file Dockerfile --tag ${{ steps.image_defs.outputs.GRYPE_IMAGE_TAG }}

      - name: Run Anchore Grype scan
        uses: anchore/scan-action@v3.4.0 # UPDATED to a more recent stable version tag
        id: grypescan
        with:
          image: "${{ steps.image_defs.outputs.GRYPE_IMAGE_TAG }}"
          fail-build: false             # This will still fail the job if critical vulns are found
          severity-cutoff: critical    # Adjust as needed for learning, but be aware of risks
          # To allow the pipeline to continue for learning purposes even with critical findings:
          # fail-build: false
          # To specify the SARIF output file name (though default is results.sarif)
          # sarif_file: "my-grype-results.sarif"

      - name: Upload Grype vulnerability report (SARIF)
        uses: github/codeql-action/upload-sarif@v3 # Consider updating to v3 if v2 is used
        if: success() || failure() # Attempt to upload SARIF even if Grype step fails due to vulnerabilities
        with:
          sarif_file: ${{ steps.grypescan.outputs.sarif }} # This refers to the output variable from the scan action

      # Subsequent steps will only run if the Grype scan passes (due to fail-build: true)
      # or if fail-build is set to false.
      - name: Login to GitHub Container Registry
        if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Re-tag image for GHCR and Push
        if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          docker tag ${{ steps.image_defs.outputs.GRYPE_IMAGE_TAG }} ${{ steps.image_defs.outputs.GHCR_IMAGE_NAME }}:${{ steps.image_defs.outputs.GHCR_IMAGE_TAG }}
          docker push ${{ steps.image_defs.outputs.GHCR_IMAGE_NAME }}:${{ steps.image_defs.outputs.GHCR_IMAGE_TAG }}
          echo "Image pushed: ${{ steps.image_defs.outputs.GHCR_IMAGE_NAME }}:${{ steps.image_defs.outputs.GHCR_IMAGE_TAG }}"

  # Stage 4: Placeholder for Deployment
  deploy_placeholder:
    name: Deploy Application (Placeholder)
    needs: build_scan_and_push_docker
    if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Deployment steps would go here
        run: |
          echo "Simulating deployment..."
          echo "Image to deploy: ${{ needs.build_scan_and_push_docker.outputs.ghcr_image_name }}:${{ needs.build_scan_and_push_docker.outputs.ghcr_image_tag }}"
          echo "For example, using Helm to deploy to Kubernetes (AKS or Docker Desktop K8s)."
